<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
   <!--  
        注意use-expressions=true.表示开启表达式,否则表达式将不可用. see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html  
    -->  
    <security:http 
    	auto-config="true" 
    	use-expressions="false" 
    	access-denied-page="/403.jsp" 
    	entry-point-ref="casProcessingFilterEntryPoint">
        <security:intercept-url pattern="/index.jsp" access="ROLE_USER" />  
        <security:intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" />  
        <!--允许IS_AUTHENTICATED_ANONYMOUSLY匿名访问  
        <security:intercept-url pattern="/xxx.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY" /> --> 
          
        <!-- filters="none"  不过滤这些资源-->  
        <security:intercept-url pattern="/js/**" filters="none" />  
        <security:intercept-url pattern="/login.jsp" filters="none" />  
  
        <security:logout logout-success-url="/logout.jsp"/>  
        <security:custom-filter ref="casAuthenticationFilter" after="CAS_FILTER"/>
        <security:custom-filter ref="singleSignOutFilter" before="CAS_FILTER" />
        <security:custom-filter ref="logoutFilter" before="LOGOUT_FILTER" />
    </security:http>
    
    <security:authentication-manager alias="authenticationManager">  
        <security:authentication-provider ref="casAuthenticationProvider"/>  
    </security:authentication-manager>
    
    <bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
    	<property name="authenticationManager" ref="authenticationManager"/>  
        <!-- 认证失败返回的页面(非403错误) -->
        <property name="authenticationFailureHandler">  
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
                <beans:property name="defaultFailureUrl" value="/failed.jsp"/>  
            </bean>  
        </property>  
        <!-- 认证成功返回的页面，此处做了修改，这个类是继续之前的操作。默认的类是设置一个固定的页面 -->  
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler" />  
        </property>  
    </bean>
    
    <bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">  
        <!-- 单点登录服务器登录URL -->
        <property name="loginUrl" value="https://localhost:8443/cas/login"/> 
        <property name="serviceProperties" ref="serviceProperties"/>  
    </bean>  
  
    <bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">  
        <property name="userDetailsService" ref="customUserDetailsService"/>  
        <property name="serviceProperties" ref="serviceProperties" />
        <property name="ticketValidator">  
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">  
                <constructor-arg index="0" value="https://localhost:8443/cas/"/>  
            </bean>  
        </property>  
        <property name="key" value="an_id_for_this_auth_provider_only"/>  
    </bean>
    
    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
    	<!-- client服务的URL， j_spring_cas_security_check是security自己定义的一个filter-->
        <property name="service" value="http://localhost:8080/test/j_spring_cas_security_check"/>  
        <property name="sendRenew" value="false"/>  
    </bean> 
    <bean id="customUserDetailsService" class="com.x.security.CustomUserDetailService" />
    
    <!-- 
    <bean id="customUserDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">  
        <property name="dataSource" ref="dataSource" />  
        <property name="enableGroups" value="true" />  
    </bean>  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName">  
            <value>com.mysql.jdbc.Driver</value>  
        </property>  
        <property name="url">  
            <value>jdbc:mysql://ip:3306/database?characterEncoding=UTF-8</value>  
        </property>  
        <property name="username">  
            <value>root</value>  
        </property>  
        <property name="password">  
            <value></value>  
        </property>  
    </bean> -->
    
    <!-- 会拦截所有请求，而不是仅仅拦截logout时的请求,在sso client应用中存在一个Map<Ticket,HttpSession>对象,在sso server认证用户名密码成功后，会redirect一个带有ticket的请求到sso client,这时就执行下面的逻辑，ticket和当前session会被缓存到Map,退出时，sso server发送带logoutRequest参数的http请求到每一个sso client,这时就会执行下面的逻辑,删除ticket对应的session 然后销毁session-->
	<bean id="singleSignOutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- 注销服务器端 -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="https://localhost:8443/cas/logout" />
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>
    
</beans>